def printTableu(tableu):
 print('----------------------')
 for row in tableu:
  print (row)
 print('----------------------')
 return


def pivotOn(tableu, row, col):
 j = 0
 pivot = tableu[row][col]
 for x in tableu[row]:
  tableu[row][j] = tableu[row][j] / pivot
  j += 1
 i = 0
 for xi in tableu:
  if i != row:
   ratio = xi[col]
   j = 0
   for xij in xi:
    xij -= ratio * tableu[row][j]
    tableu[i][j] = xij
    j += 1
  i += 1
 return tableu


# assuming tablue in standard form with basis formed in last m columns
def simplex(tableu):

 THETA_INFINITE = -1
 opt   = False
 unbounded  = False
 n = len(tableu[0])
 m = len(tableu) - 1

 while ((not opt) and (not unbounded)):
  min = 0.0
  pivotCol = j = 0
  while(j < (n-m)):
   cj = tableu[0][j]
   # we will simply choose the most negative column
    #which is called: "the nonbasic gradient method"
    #other methods as "all-variable method" could be used
    #but the nonbacis gradient method is simpler
    #and all-variable method has only been shown to be superior for some
     #extensive experiments by Kuhn and Quandt, the random tests used
     #by Kuhn and Quandt might not really represent "typical" LP's for
     #certain users.
   if (cj < min) and (j > 0):
    min = cj
    pivotCol = j
   j += 1
  if min == 0.0:
   #we cannot profitably bring a column into the basis
   #which means that we've found an optimal solution
   opt = True
   continue
  pivotRow = i = 0
  minTheta = THETA_INFINITE
  for xi in tableu:
   # Bland's anticycling algorithm  is theoretically a better option than
    #this implementation because it is guaranteed finite while this policy can produce cycling.
    #Kotiath and Steinberg (1978) reported that cylcing does occur in practice
    #contradicting previous reports. For simplicity, I don't use Bland's algorithm here
    #so I just choose smallest xij for pivot row
   if (i > 0):
    xij = xi[pivotCol]
    if xij > 0:
     theta = (xi[0] / xij)
     if (theta < minTheta) or (minTheta == THETA_INFINITE):
      minTheta = theta
      pivotRow = i
   i += 1
  if minTheta == THETA_INFINITE:
   #bringing pivotCol into the basis
   #we can move through that vector indefinetly without
   #becoming unfesible so the polytope is not bounded in all directions
   unbounded = True
   continue

  #now we pivot on pivotRow and pivotCol
  tableu = pivotOn(tableu, pivotRow, pivotCol)
 print ('opt = {}'.format(opt))
 print ('unbounded = {}'.format(unbounded))
 print ('Final Tableu')
 printTableu(tableu)
 return tableu


z  = [0.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 0.0,  0.0,  0.0,  0.0,  0.0, 0.0,  0.0,  0.0,  0.0,  0.0]
x1 = [1.0,  -0.0112283576491027, -0.0228738517516245, -0.0126823214727424, -0.00972051418364996, -0.0172426746806912, -0.00269232638382660, -0.00649407952269925, -0.0175478695843877, -0.00380715707440104, -0.0109751234259215,  1.0,  0.0,  0.0,  0.0,  0.0, 0.0,  0.0,  0.0,  0.0, 0.0]
x2 = [1.0,  -0.00878389550264550, -0.00423490286020689, -0.0126823214727424, -0.0497439937414605, -0.0172426746806912, -0.00393554414725061, -0.00649407952269925, -0.00325055072300939, -0.00750495824467054, -0.0126823214727424,   0.0,  1.0,  0.0,  0.0,  0.0, 0.0,  0.0,  0.0,  0.0, 0.0]
x3 = [1.0,  -0.0303020520285500, -0.00423490286020689, -0.0126823214727424, -0.00631344145044561, -0.0172426746806912, -0.00393554414725061, -0.00649407952269925, -0.0126823214727424, -0.00380715707440104, -0.00603219927986872,  0.0,  0.0,  1.0,  0.0,  0.0, 0.0,  0.0,  0.0,  0.0, 0.0]
x4 = [1.0,  -0.0148534774780273, -0.00466785596987878, -0.00229548032887751, -0.00972051418364996, -0.00490767735665695, -0.00701107871720116, -0.00815001100780707, -0.0175478695843877, -0.00380715707440104, -0.0109751234259215,  0.0,  0.0,  0.0,  1.0,  0.0, 0.0,  0.0,  0.0,  0.0, 0.0]
x5 = [1.0,  -0.00705828669947892, -0.00517073716781693, -0.0126823214727424, -0.00972051418364996, -0.0172426746806912, -0.00220998452290969, -0.00649407952269925, -0.0109751234259215, -0.00380715707440104, -0.00229548032887751,  0.0,  0.0,  0.0,  0.0,  1.0, 0.0,  0.0,  0.0,  0.0, 0.0]
x6 = [1.0,  -0.0247292794668888, -0.00828342813825053, -0.0126823214727424, -0.00972051418364996, -0.0207000000000000, -0.00269232638382660, -0.00371494405216642, -0.0175478695843877, -0.00380715707440104, -0.0109751234259215,  0.0,  0.0,  0.0,  0.0,  0.0, 1.0,  0.0,  0.0,  0.0, 0.0]
x7 = [1.0,  -0.00268326714607706, -0.00385949226648274, -0.00750495824467055, -0.00631344145044561, -0.00946666666666666, -0.00269232638382660, -0.00649407952269925, -0.00161662995438864, -0.00380715707440104, -0.00959053479965985,  0.0,  0.0,  0.0,  0.0,  0.0, 0.0,  1.0,  0.0,  0.0, 0.0]
x8 = [1.0,  -0.00705828669947892, -0.00182663557538024, -0.0126823214727424, -0.00972051418364996, -0.00243333333333333, -0.00174512658174798, -0.00649407952269925, -0.00301693661206829, -0.00380715707440104, -0.00750495824467055,  0.0,  0.0,  0.0,  0.0,  0.0, 0.0,  0.0,  1.0,  0.0, 0.0]
x9 = [1.0,  -0.0112283576491027, -0.0509603494732522, -0.0126823214727424, -0.00972051418364996, -0.00597025805511007, -0.00269232638382660, -0.00649407952269925, -0.00750495824467055, -0.0175478695843877, -0.0109751234259215,  0.0,  0.0,  0.0,  0.0,  0.0, 0.0,  0.0,  0.0,  1.0, 0.0]
x10 = [1.0, 0.0211148648648649, 0.0548245614035088, 0.0242248062015504, 0.0131856540084388, 0.0164473684210526, 0.0109649122807018, 0.0171703296703297, 0.0184911242603550, 0.0286697247706422, 0.0224820143884892,  0.0,  0.0,  0.0,  0.0,  0.0, 0.0,  0.0,  0.0,  0.0, 1.0]

# [[-0.0112283576491027, -0.0228738517516245, -0.0126823214727424, -0.00972051418364996, -0.0172426746806912, -0.00269232638382660, -0.00649407952269925, -0.0175478695843877, -0.00380715707440104, -0.0109751234259215],
# [-0.00878389550264550, -0.00423490286020689, -0.0126823214727424, -0.0497439937414605, -0.0172426746806912, -0.00393554414725061, -0.00649407952269925, -0.00325055072300939, -0.00750495824467054, -0.0126823214727424],
# [-0.0303020520285500, -0.00423490286020689, -0.0126823214727424, -0.00631344145044561, -0.0172426746806912, -0.00393554414725061, -0.00649407952269925, -0.0126823214727424, -0.00380715707440104, -0.00603219927986872],
# [-0.0148534774780273, -0.00466785596987878, -0.00229548032887751, -0.00972051418364996, -0.00490767735665695, -0.00701107871720116, -0.00815001100780707, -0.0175478695843877, -0.00380715707440104, -0.0109751234259215],
# [-0.00705828669947892, -0.00517073716781693, -0.0126823214727424, -0.00972051418364996, -0.0172426746806912, -0.00220998452290969, -0.00649407952269925, -0.0109751234259215, -0.00380715707440104, -0.00229548032887751],
# [-0.0247292794668888, -0.00828342813825053, -0.0126823214727424, -0.00972051418364996, -0.0207000000000000, -0.00269232638382660, -0.00371494405216642, -0.0175478695843877, -0.00380715707440104, -0.0109751234259215],
# [-0.00410739086469068, -0.00828342813825053, -0.00261936071524021, -0.00972051418364996, -0.00597025805511007, -0.0158297032958001, -0.00649407952269925, -0.0175478695843877, -0.00380715707440104, -0.00261936071524021],
# [-0.00268326714607706, -0.00385949226648274, -0.00750495824467055, -0.00631344145044561, -0.00946666666666666, -0.00269232638382660, -0.00649407952269925, -0.00161662995438864, -0.00380715707440104, -0.00959053479965985],
# [-0.00705828669947892, -0.00182663557538024, -0.0126823214727424, -0.00972051418364996, -0.00243333333333333, -0.00174512658174798, -0.00649407952269925, -0.00301693661206829, -0.00380715707440104, -0.00750495824467055],
# [-0.0112283576491027, -0.0509603494732522, -0.0126823214727424, -0.00972051418364996, -0.00597025805511007, -0.00269232638382660, -0.00649407952269925, -0.00750495824467055, -0.0175478695843877, -0.0109751234259215]]#
# [0.0211148648648649, 0.0548245614035088, 0.0242248062015504, 0.0131856540084388, 0.0164473684210526, 0.0109649122807018, 0.0171703296703297, 0.0184911242603550, 0.0286697247706422, 0.0224820143884892]]

tableu = []
tableu.append(z)
tableu.append(x1)
tableu.append(x2)
tableu.append(x3)
tableu.append(x4)
tableu.append(x5)
tableu.append(x6)
tableu.append(x7)
tableu.append(x8)
tableu.append(x9)
tableu.append(x10)

tableu = simplex(tableu)

print('----------------------------------------------')
#print((0.4 * (9.2 ** 2) + 0.4 *(9.1 ** 2) + 0.4 *(28 ** 2)) ** -1/2)
#print((0.4 * (1.2 ** 2) + 0.4 *(0.7 ** 2) + 0.4 *(1.1 ** 2)) ** -1/2)

V = 1 / tableu[0][0]
print("V = ", V)

length = len(tableu)
strategies = [0 for x in range(length)]
for n in range(1, length):
    strategies[n - 1] = tableu[n][0] * V
    print(tableu[n][0])
print(strategies)

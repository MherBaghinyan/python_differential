from TransformationUtils import *

d = Symbol('d')
t = Symbol('t')


def item_multi_transform(item, t_level, d_level, value, d_value):
    if t_level == 0:
        return item.evalf(subs={t: value, d: d_value})
    derivative = diff(item, t, t_level)
    expr_with_value = derivative.evalf(subs={t: value, d: d_value})
    return expr_with_value / factorial(t_level)


def matrix_multi_differential(matrix, t_level, d_level, t_value, d_value):
    "returns a differential of given matrix"
    _length = len(matrix)
    z_matrix = [[0] * _length for x in range(_length)]
    for i in range(0, _length):
        for j in range(0, _length):
            z_matrix[i][j] = item_multi_transform(matrix[i][j], t_level, d_level, t_value, d_value)
    return z_matrix


R_matrix = [[(0.4 * (7/d ** 2) + 0.4 * (0.7/t ** 2) + 0.4 * (7.1/d ** 2)) ** -1/2,
             (0.4 * (4/d ** 2) + 0.4 * (0.5/t ** 2) + 0.4 * (4.2/d ** 2)) ** -1/2,
             (0.4 * (6/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (6.3/d ** 2)) ** -1/2,
             (0.4 * (11/d ** 2) + 0.4 * (1.6/t ** 2) + 0.4 * (11.1/d ** 2)) ** -1/2,
             (0.4 * (5/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (5.4/d ** 2)) ** -1/2,
             (0.4 * (14/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (13.9/d ** 2)) ** -1/2,
             (0.4 * (9/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (8.6/d ** 2)) ** -1/2,
             (0.4 * (5/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (5.3/d ** 2)) ** -1/2,
             (0.4 * (12/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (11.3/d ** 2)) ** -1/2,
             (0.4 * (6/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (7.3/d ** 2)) ** -1/2],

            [(0.4 * (8/d ** 2) + 0.4 * (0.7/t ** 2) + 0.4 * (8.1/d ** 2)) ** -1/2,
             (0.4 * (10/d ** 2) + 0.4 * (0.5/t ** 2) + 0.4 * (10.2/d ** 2)) ** -1/2,
             (0.4 * (6/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (6.3/d ** 2)) ** -1/2,
             (0.4 * (4/d ** 2) + 0.4 * (1.6/t ** 2) + 0.4 * (4.1/d ** 2)) ** -1/2,
             (0.4 * (5/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (5.4/d ** 2)) ** -1/2,
             (0.4 * (11/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (11.9/d ** 2)) ** -1/2,
             (0.4 * (9/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (8.6/d ** 2)) ** -1/2,
             (0.4 * (13/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (12.3/d ** 2)) ** -1/2,
             (0.4 * (7/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (9.3/d ** 2)) ** -1/2,
             (0.4 * (6/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (6.3/d ** 2)) ** -1/2],

            [(0.4 * (4/d ** 2) + 0.4 * (0.7/t ** 2) + 0.4 * (4.1/d ** 2)) ** -1/2,
             (0.4 * (10/d ** 2) + 0.4 * (0.5/t ** 2) + 0.4 * (10.2/d ** 2)) ** -1/2,
             (0.4 * (6/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (6.3/d ** 2)) ** -1/2,
             (0.4 * (14/d ** 2) + 0.4 * (1.6/t ** 2) + 0.4 * (14.1/d ** 2)) ** -1/2,
             (0.4 * (5/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (5.4/d ** 2)) ** -1/2,
             (0.4 * (11/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (11.9/d ** 2)) ** -1/2,
             (0.4 * (9/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (8.6/d ** 2)) ** -1/2,
             (0.4 * (7/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (5.3/d ** 2)) ** -1/2,
             (0.4 * (12/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (11.3/d ** 2)) ** -1/2,
             (0.4 * (9/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (9.3/d ** 2)) ** -1/2],

            [(0.4 * (5/d ** 2) + 0.4 * (0.7/t ** 2) + 0.4 * (7.1/d ** 2)) ** -1/2,
             (0.4 * (9/d ** 2) + 0.4 * (0.5/t ** 2) + 0.4 * (10.2/d ** 2)) ** -1/2,
             (0.4 * (15/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (15.3/d ** 2)) ** -1/2,
             (0.4 * (11/d ** 2) + 0.4 * (1.6/t ** 2) + 0.4 * (11.1/d ** 2)) ** -1/2,
             (0.4 * (10/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (10.4/d ** 2)) ** -1/2,
             (0.4 * (8/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (8.9/d ** 2)) ** -1/2,
             (0.4 * (7/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (8.6/d ** 2)) ** -1/2,
             (0.4 * (5/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (5.3/d ** 2)) ** -1/2,
             (0.4 * (12/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (11.3/d ** 2)) ** -1/2,
             (0.4 * (6/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (7.3/d ** 2)) ** -1/2],

            [(0.4 * (11/d ** 2) + 0.4 * (0.7/t ** 2) + 0.4 * (7.1/d ** 2)) ** -1/2,
             (0.4 * (14/d ** 2) + 0.4 * (0.5/t ** 2) + 0.4 * (4.2/d ** 2)) ** -1/2,
             (0.4 * (6/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (6.3/d ** 2)) ** -1/2,
             (0.4 * (11/d ** 2) + 0.4 * (1.6/t ** 2) + 0.4 * (11.1/d ** 2)) ** -1/2,
             (0.4 * (5/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (5.4/d ** 2)) ** -1/2,
             (0.4 * (17/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (13.9/d ** 2)) ** -1/2,
             (0.4 * (9/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (8.6/d ** 2)) ** -1/2,
             (0.4 * (8/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (5.3/d ** 2)) ** -1/2,
             (0.4 * (12/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (11.3/d ** 2)) ** -1/2,
             (0.4 * (13/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (17.3/d ** 2)) ** -1/2],

            [(0.4 * (4/d ** 2) + 0.4 * (0.7/t ** 2) + 0.4 * (5.1/d ** 2)) ** -1/2,
             (0.4 * (7/d ** 2) + 0.4 * (0.5/t ** 2) + 0.4 * (7.2/d ** 2)) ** -1/2,
             (0.4 * (6/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (6.3/d ** 2)) ** -1/2,
             (0.4 * (11/d ** 2) + 0.4 * (1.6/t ** 2) + 0.4 * (11.1/d ** 2)) ** -1/2,
             (0.4 * (4/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (5.4/d ** 2)) ** -1/2,
             (0.4 * (14/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (13.9/d ** 2)) ** -1/2,
             (0.4 * (12/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (11.6/d ** 2)) ** -1/2,
             (0.4 * (5/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (5.3/d ** 2)) ** -1/2,
             (0.4 * (12/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (11.3/d ** 2)) ** -1/2,
             (0.4 * (6/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (7.3/d ** 2)) ** -1/2],

            [(0.4 * (12/d ** 2) + 0.4 * (0.7/t ** 2) + 0.4 * (12.1/d ** 2)) ** -1/2,
             (0.4 * (7/d ** 2) + 0.4 * (0.5/t ** 2) + 0.4 * (7.2/d ** 2)) ** -1/2,
             (0.4 * (14/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (14.3/d ** 2)) ** -1/2,
             (0.4 * (11/d ** 2) + 0.4 * (1.6/t ** 2) + 0.4 * (11.1/d ** 2)) ** -1/2,
             (0.4 * (9/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (9.4/d ** 2)) ** -1/2,
             (0.4 * (4/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (6.9/d ** 2)) ** -1/2,
             (0.4 * (9/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (8.6/d ** 2)) ** -1/2,
             (0.4 * (5/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (5.3/d ** 2)) ** -1/2,
             (0.4 * (12/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (11.3/d ** 2)) ** -1/2,
             (0.4 * (14/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (14.3/d ** 2)) ** -1/2],

            [(0.4 * (15/d ** 2) + 0.4 * (0.7/t ** 2) + 0.4 * (15.1/d ** 2)) ** -1/2,
             (0.4 * (11/d ** 2) + 0.4 * (0.5/t ** 2) + 0.4 * (10.2/d ** 2)) ** -1/2,
             (0.4 * (8/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (8.3/d ** 2)) ** -1/2,
             (0.4 * (14/d ** 2) + 0.4 * (1.6/t ** 2) + 0.4 * (14.1/d ** 2)) ** -1/2,
             (0.4 * (7/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (7.4/d ** 2)) ** -1/2,
             (0.4 * (14/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (13.9/d ** 2)) ** -1/2,
             (0.4 * (9/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (8.6/d ** 2)) ** -1/2,
             (0.4 * (18/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (18.3/d ** 2)) ** -1/2,
             (0.4 * (12/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (11.3/d ** 2)) ** -1/2,
             (0.4 * (7/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (7.3/d ** 2)) ** -1/2],

            [(0.4 * (9/d ** 2) + 0.4 * (0.7/t ** 2) + 0.4 * (9.1/d ** 2)) ** -1/2,
             (0.4 * (16/d ** 2) + 0.4 * (0.5/t ** 2) + 0.4 * (15.2/d ** 2)) ** -1/2,
             (0.4 * (6/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (6.3/d ** 2)) ** -1/2,
             (0.4 * (11/d ** 2) + 0.4 * (1.6/t ** 2) + 0.4 * (11.1/d ** 2)) ** -1/2,
             (0.4 * (14/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (15.4/d ** 2)) ** -1/2,
             (0.4 * (17/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (17.9/d ** 2)) ** -1/2,
             (0.4 * (9/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (8.6/d ** 2)) ** -1/2,
             (0.4 * (13/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (13.3/d ** 2)) ** -1/2,
             (0.4 * (12/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (11.3/d ** 2)) ** -1/2,
             (0.4 * (8/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (8.3/d ** 2)) ** -1/2],

            [(0.4 * (7/d ** 2) + 0.4 * (0.7/t ** 2) + 0.4 * (7.1/d ** 2)) ** -1/2,
             (0.4 * (3/d ** 2) + 0.4 * (0.5/t ** 2) + 0.4 * (2.2/d ** 2)) ** -1/2,
             (0.4 * (6/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (6.3/d ** 2)) ** -1/2,
             (0.4 * (11/d ** 2) + 0.4 * (1.6/t ** 2) + 0.4 * (11.1/d ** 2)) ** -1/2,
             (0.4 * (9/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (9.4/d ** 2)) ** -1/2,
             (0.4 * (14/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (13.9/d ** 2)) ** -1/2,
             (0.4 * (9/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (8.6/d ** 2)) ** -1/2,
             (0.4 * (8/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (8.3/d ** 2)) ** -1/2,
             (0.4 * (5/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (5.3/d ** 2)) ** -1/2,
             (0.4 * (6/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (7.3/d ** 2)) ** -1/2]]

#print(R_matrix)
print('---------------------------------------------------------------------------------')
#print(item_multi_transform((0.4 * (6/d ** 2) + 0.4 * (0.6/t ** 2) + 0.4 * (7.3/d ** 2)) ** -1/2, 0, 0, 0.5, 0.5))
print('---------------------------------------------------------------------------------')
#print(matrix_multi_differential(R_matrix, 2, 2, 0.5, 0.5))

# d=0.5, t=0.5 k=2
#[[0.00399470416362308, 0.00825736557008852, 0.00450694068866054, 0.00356068293898770, 0.00619834710743802, 0.000923361034164358, 0.00226421929718633, 0.00631259994949920, 0.00131300222335043, 0.00388178665700533],
# [0.00310019841269841, 0.00145861046932250, 0.00450694068866054, 0.0212562440216814, 0.00619834710743802, 0.00135808057944771, 0.00226421929718633, 0.00111805131110150, 0.00262595847484332, 0.00450694068866054],
# [0.0112990702479339, 0.00145861046932250, 0.00450694068866054, 0.00226734233468240, 0.00619834710743802, 0.00135808057944771, 0.00226421929718633, 0.00450694068866054, 0.00131300222335043, 0.00209960527420845],
# [0.00534057617187500, 0.00161045118400371, 0.000785496590944795, 0.00356068293898770, 0.00170068027210884, 0.00244897959183673, 0.00285779606767261, 0.00631259994949920, 0.00131300222335043, 0.00388178665700533],
# [0.00247566772295156, 0.00178729732048386, 0.00450694068866054, 0.00356068293898770, 0.00619834710743802, 0.000755857898715041, 0.00226421929718633, 0.00388178665700533, 0.00131300222335043, 0.000785496590944795],
# [0.00911078717201166, 0.00289231338794021, 0.00450694068866054, 0.00356068293898770, 0.00750000000000000, 0.000923361034164358, 0.00128065022880951, 0.00631259994949920, 0.00131300222335043, 0.00388178665700533],
# [0.00142267169614984, 0.00289231338794021, 0.000897977754097772, 0.00356068293898770, 0.00207756232686981, 0.00567107750472590, 0.00226421929718633, 0.00631259994949920, 0.00131300222335043, 0.000897977754097772],
# [0.000922373081463991, 0.00132727388562085, 0.00262595847484332, 0.00226734233468240, 0.00333333333333333, 0.000923361034164358, 0.00226421929718633, 0.000550818516315244, 0.00131300222335043, 0.00337822620602675],
# [0.00247566772295156, 0.000621958622336773, 0.00450694068866054, 0.00356068293898770, 0.000833333333333333, 0.000595120015869867, 0.00226421929718633, 0.00103646992164287, 0.00131300222335043, 0.00262595847484332],
#  [0.00399470416362308, 0.0192366882117575, 0.00450694068866054, 0.00356068293898770, 0.00207756232686981, 0.000923361034164358, 0.00226421929718633, 0.00262595847484332, 0.00631259994949920, 0.00388178665700533]]

# d=0.5

# Dj   7,   4,   6,  11,  5,  14,  9,  5,  12,  6


z = [0.0, -1.0, -1.0, -1.0, -1.0, -1.0, 0.0,  0.0,  0.0,  0.0,  0.0]
x1 = [1.0,  (0.4 * (1.2 ** 2) + 0.4 * (0.3 ** 2) + 0.4 * (1.1 ** 2)) ** -1/2,  (0.4 * (1.2 ** 2) + 0.4 *(0.11 ** 2) + 0.4 *(1.1 ** 2)) ** -1/2, (0.4 * (1.2 ** 2) + 0.4 *(0.1 ** 2) + 0.4 *(1.1 ** 2)) ** -1/2,  (0.4 * (1.2 ** 2) + 0.4 *(0.12 ** 2) + 0.4 *(1.1 ** 2)) ** -1/2, (0.4 * (1.2 ** 2) + 0.4 *(0.31 ** 2) + 0.4 *(1.1 ** 2)) ** -1/2,  1.0,  0.0,  0.0,  0.0,  0.0]
x2 = [1.0, (0.4 * (1.4 ** 2) + 0.4 * (0.2 ** 2) + 0.4 * (1.0 ** 2)) ** -1/2, (0.4 * (0.7 ** 2) + 0.4 *(0.2 ** 2) + 0.4 *(1.1 ** 2)) ** -1/2, (0.4 * (1.2 ** 2) + 0.4 *(0.31 ** 2) + 0.4 *(1.1 ** 2)) ** -1/2, (0.4 * (1.2 ** 2) + 0.4 *(0.17 ** 2) + 0.4 *(1.1 ** 2)) ** -1/2, (0.4 * (1.2 ** 2) + 0.4 *(0.12 ** 2) + 0.4 *(0.1 ** 2)) ** -1/2,   0.0,  1.0,  0.0,  0.0,  0.0]
x3 = [1.0,  (0.4 * (1.2 ** 2) + 0.4 * (0.11 ** 2) + 0.4 * (1.15 ** 2)) ** -1/2,  (0.4 * (0.9 ** 2) + 0.4 *(0.17 ** 2) + 0.4 *(1.1 ** 2)) ** -1/2, (0.4 * (1.2 ** 2) + 0.4 *(0.14 ** 2) + 0.4 *(1.1 ** 2)) ** -1/2, (0.4 * (0.9 ** 2) + 0.4 *(0.24 ** 2) + 0.4 *(1.2 ** 2)) ** -1/2, (0.4 * (1.2 ** 2) + 0.4 *(0.18 ** 2) + 0.4 *(1.3 ** 2)) ** -1/2,  0.0,  0.0,  1.0,  0.0,  0.0]
x4 = [1.0,  (0.4 * (1.1 ** 2) + 0.4 * (0.16 ** 2) + 0.4 * (1.14 ** 2)) ** -1/2,  (0.4 * (1.2 ** 2) + 0.4 *(0.25 ** 2) + 0.4 *(1.1 ** 2)) ** -1/2, (0.4 * (1.2 ** 2) + 0.4 *(0.2 ** 2) + 0.4 *(1.1 ** 2)) ** -1/2,  (0.4 * (1.2 ** 2) + 0.4 *(0.23 ** 2) + 0.4 *(1.4 ** 2)) ** -1/2, (0.4 * (1.2 ** 2) + 0.4 *(0.26 ** 2) + 0.4 *(1.0 ** 2)) ** -1/2,  0.0,  0.0,  0.0,  1.0,  0.0]
x5 = [1.0,  (0.4 * (1.6 ** 2) + 0.4 * (0.21 ** 2) + 0.4 * (1.2 ** 2)) ** -1/2,  (0.4 * (1.2 ** 2) + 0.4 *(0.3 ** 2) + 0.4 * (1.1 ** 2)) ** -1/2, (0.4 * (1.2 ** 2) + 0.4 *(0.21 ** 2) + 0.4 *(1.1 ** 2)) ** -1/2,  (0.4 * (0.7 ** 2) + 0.4 *(0.12 ** 2) + 0.4 *(0.3 ** 2)) ** -1/2, (0.4 * (1.2 ** 2) + 0.4 *(0.2 ** 2) + 0.4 *(0.9 ** 2)) ** -1/2,  0.0,  0.0,  0.0,  0.0,  1.0]


print('---------------------------------------------------------------------')
# print((0.4 * (9.2 ** 2) + 0.4 * (9.1 ** 2) + 0.4 * (28 ** 2)) ** -1/2)
# print((0.4 * (1.2 ** 2) + 0.4 * (0.7 ** 2) + 0.4 * (1.1 ** 2)) ** -1/2)

# 0.013657238664528403, 0.014900456427952413, 0.014900456427952413, 0.017975990997902962,
# 0.013174896803611493, 0.013657238664528401, 0.013657238664528403, 0.012710038862449783,
# 0.013657238664528403

p_item = 0.0135*((t-0.5)**0)*((d-0.5)**0) + 0.2305*((t-0.5)**1)*((d-0.5)**1) + 0.0443*((t-0.5)**2)*((d-0.5)**2) + 0.1996*((t-0.5)**0)*((d-0.5)**1)
p_item1 = 0.0008*((t-0.5)**0)*((d-0.5)**2) + 0.1657*((t-0.5)**1)*((d-0.5)**0) + 0.2754*((t-0.5)**2)*((d-0.5)**0)
p_item2 = 0.0008*((t-0.5)**1)*((d-0.5)**2) + 0.0006*((t-0.5)**2)*((d-0.5)**1)
result = p_item + p_item1 + p_item2
print(result.evalf(subs={t: 0.5, d: 0.5}))
